// Code generated by kun; DO NOT EDIT.
// github.com/RussellLuo/kun

package endpoint

import (
	"context"

	"github.com/RussellLuo/kun/pkg/httpoption"
	"github.com/RussellLuo/validating/v3"
	"github.com/go-aie/oneai/embedding/api"
	"github.com/go-kit/kit/endpoint"
)

type EncodeRequest struct {
	Req *api.Request `json:"req"`
}

// ValidateEncodeRequest creates a validator for EncodeRequest.
func ValidateEncodeRequest(newSchema func(*EncodeRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*EncodeRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type EncodeResponse struct {
	Resp *api.Response `json:"resp"`
	Err  error         `json:"-"`
}

func (r *EncodeResponse) Body() interface{} { return &r.Resp }

// Failed implements endpoint.Failer.
func (r *EncodeResponse) Failed() error { return r.Err }

// MakeEndpointOfEncode creates the endpoint for s.Encode.
func MakeEndpointOfEncode(s api.Embedding) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*EncodeRequest)
		resp, err := s.Encode(
			ctx,
			req.Req,
		)
		return &EncodeResponse{
			Resp: resp,
			Err:  err,
		}, nil
	}
}
