// Code generated by kun; DO NOT EDIT.
// github.com/RussellLuo/kun

package http

import (
	"reflect"

	"github.com/RussellLuo/kun/pkg/oas2"
	"github.com/go-aie/oneai/vectorstore/api"
	"github.com/go-aie/oneai/vectorstore/controller/endpoint"
)

var (
	base = `swagger: "2.0"
info:
  title: "No Title"
  version: "0.0.0"
  description: ""
  license:
    name: "MIT"
host: "example.com"
basePath: "/"
schemes:
  - "https"
consumes:
  - "application/json"
produces:
  - "application/json"
`

	paths = `
paths:
  /delete:
    post:
      description: "deletes the chunks belonging to the given sourceIDs.\nAs a special case, empty documentIDs means deleting all chunks."
      summary: "deletes the chunks belonging to the given sourceIDs.\nAs a special case, empty documentIDs means deleting all chunks."
      operationId: "Delete"
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: ""
        - name: body
          in: body
          schema:
            $ref: "#/definitions/DeleteRequestBody"
      %s
  /query:
    post:
      description: ""
      summary: ""
      operationId: "Query"
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: ""
        - name: body
          in: body
          schema:
            $ref: "#/definitions/QueryRequestBody"
      %s
  /upsert:
    post:
      description: ""
      summary: ""
      operationId: "Upsert"
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: ""
        - name: body
          in: body
          schema:
            $ref: "#/definitions/UpsertRequestBody"
      %s
`
)

func getResponses(schema oas2.Schema) []oas2.OASResponses {
	return []oas2.OASResponses{
		oas2.GetOASResponses(schema, "Delete", 200, &endpoint.DeleteResponse{}),
		oas2.GetOASResponses(schema, "Query", 200, &endpoint.QueryResponse{}),
		oas2.GetOASResponses(schema, "Upsert", 200, &endpoint.UpsertResponse{}),
	}
}

func getDefinitions(schema oas2.Schema) map[string]oas2.Definition {
	defs := make(map[string]oas2.Definition)

	oas2.AddDefinition(defs, "DeleteRequestBody", reflect.ValueOf(&struct {
		Vendor    string   `json:"vendor"`
		SourceIDs []string `json:"source_i_ds"`
	}{}))
	oas2.AddResponseDefinitions(defs, schema, "Delete", 200, (&endpoint.DeleteResponse{}).Body())

	oas2.AddDefinition(defs, "QueryRequestBody", reflect.ValueOf(&struct {
		Vendor string    `json:"vendor"`
		Vector []float64 `json:"vector"`
		TopK   int       `json:"top_k"`
	}{}))
	oas2.AddResponseDefinitions(defs, schema, "Query", 200, (&endpoint.QueryResponse{}).Body())

	oas2.AddDefinition(defs, "UpsertRequestBody", reflect.ValueOf(&struct {
		Vendor    string          `json:"vendor"`
		Documents []*api.Document `json:"documents"`
	}{}))
	oas2.AddResponseDefinitions(defs, schema, "Upsert", 200, (&endpoint.UpsertResponse{}).Body())

	return defs
}

func OASv2APIDoc(schema oas2.Schema) string {
	resps := getResponses(schema)
	paths := oas2.GenPaths(resps, paths)

	defs := getDefinitions(schema)
	definitions := oas2.GenDefinitions(defs)

	return base + paths + definitions
}
